#!/web/cs2041/lib/Python-3.5.3/bin/python3

# depends on $HOME/.python-gitlab.cfg containing gitlab token
# and $SMSDB/security containing mapping of tutors to tuts

import os, re, subprocess, sys, uuid
scriptdir = os.path.dirname(os.path.realpath(sys.argv[0]))
basedir = os.path.dirname(scriptdir)
sys.path.append(os.path.join(basedir, 'lib', 'python'))

from cse import util
from cse.course_configuration import course_configuration
import gitlab

def ensure_gitlab_user_exists(gl, zid):
    users = gl.users.list(username=zid)
    if len(users) > 1:
        raise RuntimeError("multiple users match zid: "+zid)
    elif len(users) == 1:
        users[0].unblock()
        return users[0]
    print('Creating gitlab user: ' + zid)
    email = subprocess.check_output(['/usr/bin/acc', 'format=$mail', zid], universal_newlines=True).strip()
    email = email or zid + "@unsw.edu.au" # test student have no email address
    name = subprocess.check_output(['/usr/bin/acc', 'format=$name', zid], universal_newlines=True).strip()
    name = name or zid  # test students have no name
    return gl.users.create({
            'email': email,
            'password': str(uuid.uuid4()),
            'username': zid,
            'name': name
        })
                        
def ensure_student_project_exists(gl, zid, project_name, master_users=[], tutor_zids=[], import_url=None, tutor_access_level=gitlab.REPORTER_ACCESS):
    gl_user = ensure_gitlab_user_exists(gl, zid)
    project_path = zid + '/' + project_name
    try:
        project = gl.projects.get(project_path)
    except gitlab.exceptions.GitlabGetError:
        project_args = {'name': project_name,  'user_id': gl_user.id}
        if import_url:
            project_args['import_url'] = import_url
        print('Creating gitlab project: ' + project_path)
        project = gl.user_projects.create(project_args)
    for user in master_users:
        gl.project_members.create({'user_id': user.id, 'access_level':gitlab.MASTER_ACCESS}, project_id=project.id)
    for tutor_zid in tutor_zids:
        gl_tutor = ensure_gitlab_user_exists(gl, tutor_zid)
        gl.project_members.create({'user_id': gl_tutor.id, 'access_level':tutor_access_level}, project_id=project.id)

if __name__ == '__main__':
    args = sys.argv[1:]
    if not args:
        print("Usage:", sys.argv[0], '<project_name>', '[import_url]', '[student_zids]', file=sys.stderr)
        sys.exit(1)
    project_name = args.pop(0)
    import_url = None
    if args and ':' in args[0]:
        import_url = args.pop(0)
    (lab_to_tutors, tutors_to_lab) = util.get_tutor_timetable()
    students_tutlab = util.get_students_tutlab(course_configuration['course_codes'])
    if args:
        student_zids = [re.sub(r'^z?', 'z', a) for a in args]
    else:
        student_zids = students_tutlab.keys()
    gl = gitlab.Gitlab.from_config() # get access token from $HOME/.python-gitlab.cfg
    gl.auth()
    master_users = gl.users.list(username=course_configuration['course_account'])
    for student_zid in student_zids:
        tutors_zids = lab_to_tutors.get(students_tutlab.get(student_zid, None), [])
        ensure_student_project_exists(gl, student_zid, project_name, master_users, tutors_zids, import_url=import_url)
